{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Builds a VPC w/ INET Gateway and 3 public/private subnets, RDS DB Group and Bastion OpsWorks stack. **WARNING**: Creates EC2 & IAM Resources",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "64"
      },
      "m1.small": {
        "Arch": "64"
      },
      "m1.medium": {
        "Arch": "64"
      },
      "m1.large": {
        "Arch": "64"
      },
      "m1.xlarge": {
        "Arch": "64"
      },
      "m2.xlarge": {
        "Arch": "64"
      },
      "m2.2xlarge": {
        "Arch": "64"
      },
      "m2.4xlarge": {
        "Arch": "64"
      },
      "c1.medium": {
        "Arch": "64"
      },
      "c1.xlarge": {
        "Arch": "64"
      }
    },
    "AWSRegionArch2AMINAT": {
      "us-east-1": {
        "64": "ami-f619c29f"
      },
      "us-west-1": {
        "64": "ami-3bcc9e7e"
      },
      "us-west-2": {
        "64": "ami-52ff7262"
      },
      "eu-west-1": {
        "64": "ami-e5e2d991"
      },
      "sa-east-1": {
        "64": "ami-0039e61d"
      },
      "ap-southeast-1": {
        "64": "ami-02eb9350"
      },
      "ap-northeast-1": {
        "64": "ami-14d86d15"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-35792c5c"
      },
      "us-west-1": {
        "64": "ami-687b4f2d"
      },
      "us-west-2": {
        "64": "ami-d03ea1e0"
      },
      "eu-west-1": {
        "64": "ami-149f7863"
      },
      "sa-east-1": {
        "64": "ami-9f6ec982"
      },
      "ap-southeast-1": {
        "64": "ami-14f2b946"
      },
      "ap-southeast-2": {
        "64": "ami-a148d59b"
      },
      "ap-northeast-1": {
        "64": "ami-3561fe34"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "192.168.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-vpc"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "192.168.10.0/24",
        "AvailabilityZone": "us-east-1b",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "192.168.11.0/24",
        "AvailabilityZone": "us-east-1c",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "192.168.12.0/24",
        "AvailabilityZone": "us-east-1d",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PrivateSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": "us-east-1b",
        "CidrBlock": "192.168.101.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "PrivateSubnetA"
          }
        ]
      }
    },
    "PrivateSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": "us-east-1c",
        "CidrBlock": "192.168.102.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "PrivateSubnetB"
          }
        ]
      }
    },
    "PrivateSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": "us-east-1d",
        "CidrBlock": "192.168.103.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "PrivateSubnetC"
          }
        ]
      }
    },
    "MyElastiCacheSubnetGroup": {
      "Type": "AWS::ElastiCache::SubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the ElastiCache Instance",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnetA"
          },
          {
            "Ref": "PrivateSubnetB"
          },
          {
            "Ref": "PrivateSubnetC"
          }
        ]
      }
    },
    "MyDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnetA"
          },
          {
            "Ref": "PrivateSubnetB"
          },
          {
            "Ref": "PrivateSubnetC"
          }
        ]
      }
    },
    "MyDBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for RDS DB Instance",
        "DBSecurityGroupIngress": {
          "CIDRIP": "192.168.0.0/16"
        },
        "EC2VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PrivateSubnetARouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetBRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetB"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetCRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetC"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociationA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetA"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociationB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetB"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociationC": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetC"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "NATDeviceASGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "PublicSubnetA",
        "PublicSubnetB",
        "PublicSubnetC"
      ],
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnetA"
          },
          {
            "Ref": "PublicSubnetB"
          },
          {
            "Ref": "PublicSubnetC"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "NATDeviceLaunchConfig"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-natdevice"
                ]
              ]
            },
            "PropagateAtLaunch": "True"
          }
        ],
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1"
      }
    },
    "NATDeviceLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "PublicSubnetA",
        "PublicSubnetB",
        "PublicSubnetC"
      ],
      "Properties": {
        "InstanceType": "m1.medium",
        "AssociatePublicIpAddress": "true",
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMINAT",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "NATSecurityGroup"
          }
        ]
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "192.168.0.0/16"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "192.168.0.0/16"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "192.168.0.0/16"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9418",
            "ToPort": "9418",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "192.168.0.0/16"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "123",
            "ToPort": "123",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private Route"
          }
        ]
      }
    },
    "BastionOpsWorksStack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-bastion"
            ]
          ]
        },
        "DefaultInstanceProfileArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":instance-profile/aws-opsworks-ec2-role-instance-profile"
            ]
          ]
        },
        "DefaultSshKeyName": {
          "Ref": "KeyName"
        },
        "ServiceRoleArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":role/aws-opsworks-service-role"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "DefaultSubnetId": {
          "Ref": "PublicSubnetA"
        }
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "BastionOpsWorksLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": {
          "Ref": "BastionOpsWorksStack"
        },
        "Name": "Bastion",
        "Type": "custom",
        "Shortname": "bastion",
        "AutoAssignPublicIps": "True",
        "AutoAssignElasticIps": "False",
        "CustomSecurityGroupIds": [
          {
            "Ref": "BastionSecurityGroup"
          }
        ],
        "EnableAutoHealing": "True"
      }
    },
    "BastionInstance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": {
          "Ref": "BastionOpsWorksStack"
        },
        "LayerIds": [
          {
            "Ref": "BastionOpsWorksLayer"
          }
        ],
        "InstanceType": "m1.small"
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Value": {
        "Ref": "VPC"
      },
      "Description": "VPC ID of newly created VPC"
    },
    "PublicSubnetA": {
      "Value": {
        "Ref": "PublicSubnetA"
      },
      "Description": "Public Subnet in AZ A"
    },
    "PublicSubnetB": {
      "Value": {
        "Ref": "PublicSubnetB"
      },
      "Description": "Public Subnet in AZ B"
    },
    "PublicSubnetC": {
      "Value": {
        "Ref": "PublicSubnetC"
      },
      "Description": "Public Subnet in AZ C"
    },
    "PrivateSubnetA": {
      "Value": {
        "Ref": "PrivateSubnetA"
      },
      "Description": "Public Subnet in AZ A"
    },
    "PrivateSubnetB": {
      "Value": {
        "Ref": "PrivateSubnetB"
      },
      "Description": "Public Subnet in AZ B"
    },
    "PrivateSubnetC": {
      "Value": {
        "Ref": "PrivateSubnetC"
      },
      "Description": "Public Subnet in AZ C"
    },
    "PrivateRouteTableId": {
      "Value": {
        "Ref": "PrivateRouteTable"
      },
      "Description": "Private Route Table ID"
    }
  }
}